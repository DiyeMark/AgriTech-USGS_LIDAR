{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AgriTech - USGS LIDAR A Python module that will allow users to quickly handle, convert, sample, and visualize the geographical data from 3DEP. Install git clone https://github.com/DiyeMark/AgriTech-USGS_LIDAR cd AgriTech-USGS_LIDAR pip install -r requirements.txt Usage from lidar import Lidar from visualization import Visualization from shapely.geometry import Polygon # initialize lidar lidar = Lidar() # build polygon MINX, MINY, MAXX, MAXY = [-93.756155, 41.918015, -93.747334, 41.921429] polygon = Polygon(((MINX, MINY), (MINX, MAXY), (MAXX, MAXY), (MAXX, MINY), (MINX, MINY))) # geopandas dataframe of the polygon region geo_df = lidar.fetch_lidar(polygon, [\"IA_FullState\"]) # geodata of the polygon region df = geo_df[0]['geo_data'] # initialize visualization vis = Visualization() # heatmap vis.plot_heatmap(df, column='elevation', title='IA_FullState Heatmap') # 3d plot vis.plot_3d_map(df) Lidar from shapely.geometry import Polygon from scripts.fetch_lidar import FetchLidar class Lidar: def __init__(self): self._fetch_lidar = FetchLidar() def fetch_lidar(self, polygon: Polygon, regions=[]): return self._fetch_lidar.fetch_lidar_data(polygon, regions) Visualization import numpy as np import matplotlib.pyplot as plt import rasterio from rasterio.plot import show, show_hist class Visualization: def __init__(self): pass def plot_raster(self, rast_data, title='', figsize=(10, 10)): plt.figure(figsize=figsize) im1 = plt.imshow(np.log1p(rast_data), ) # vmin=0, vmax=2.1) plt.title(\"{}\".format(title), fontdict={'fontsize': 20}) plt.axis('off') plt.colorbar(im1, fraction=0.03) def plot_raster_from_file(self, file): src = rasterio.open(file) fig, (axrgb, axhist) = plt.subplots(1, 2, figsize=(14, 7)) show(src, cmap='Greys_r', contour=True, ax=axrgb) show_hist(src, bins=50, histtype='stepfilled', lw=0.0, stacked=False, alpha=0.3, ax=axhist) plt.show() def plot_heatmap(self, df, column, title): fig, ax = plt.subplots(1, 1, figsize=(12, 10)) fig.patch.set_alpha(0) plt.grid('on', zorder=0) df.plot(column=column, ax=ax, legend=True, cmap=\"terrain\") plt.title(title) plt.xlabel('Longitude') plt.ylabel('Latitude') plt.show() def plot_3d_map(self, data): fig, ax = plt.subplots(1, 1, figsize=(12, 10)) fig.set_size_inches(18.5, 10.5, forward=True) ax = plt.axes(projection='3d') x = data.geometry.x y = data.geometry.y z = data.elevation points = np.vstack((x, y, z)).transpose() ax.scatter(points[:, 0], points[:, 1], points[:, 2], s=0.01) ax.set_xlabel('Longitude') ax.set_ylabel('Latitude') plt.show()","title":"Documentation"},{"location":"#agritech-usgs-lidar","text":"A Python module that will allow users to quickly handle, convert, sample, and visualize the geographical data from 3DEP.","title":"AgriTech - USGS LIDAR"},{"location":"#install","text":"git clone https://github.com/DiyeMark/AgriTech-USGS_LIDAR cd AgriTech-USGS_LIDAR pip install -r requirements.txt","title":"Install"},{"location":"#usage","text":"from lidar import Lidar from visualization import Visualization from shapely.geometry import Polygon # initialize lidar lidar = Lidar() # build polygon MINX, MINY, MAXX, MAXY = [-93.756155, 41.918015, -93.747334, 41.921429] polygon = Polygon(((MINX, MINY), (MINX, MAXY), (MAXX, MAXY), (MAXX, MINY), (MINX, MINY))) # geopandas dataframe of the polygon region geo_df = lidar.fetch_lidar(polygon, [\"IA_FullState\"]) # geodata of the polygon region df = geo_df[0]['geo_data'] # initialize visualization vis = Visualization() # heatmap vis.plot_heatmap(df, column='elevation', title='IA_FullState Heatmap') # 3d plot vis.plot_3d_map(df)","title":"Usage"},{"location":"#lidar","text":"from shapely.geometry import Polygon from scripts.fetch_lidar import FetchLidar class Lidar: def __init__(self): self._fetch_lidar = FetchLidar() def fetch_lidar(self, polygon: Polygon, regions=[]): return self._fetch_lidar.fetch_lidar_data(polygon, regions)","title":"Lidar"},{"location":"#visualization","text":"import numpy as np import matplotlib.pyplot as plt import rasterio from rasterio.plot import show, show_hist class Visualization: def __init__(self): pass def plot_raster(self, rast_data, title='', figsize=(10, 10)): plt.figure(figsize=figsize) im1 = plt.imshow(np.log1p(rast_data), ) # vmin=0, vmax=2.1) plt.title(\"{}\".format(title), fontdict={'fontsize': 20}) plt.axis('off') plt.colorbar(im1, fraction=0.03) def plot_raster_from_file(self, file): src = rasterio.open(file) fig, (axrgb, axhist) = plt.subplots(1, 2, figsize=(14, 7)) show(src, cmap='Greys_r', contour=True, ax=axrgb) show_hist(src, bins=50, histtype='stepfilled', lw=0.0, stacked=False, alpha=0.3, ax=axhist) plt.show() def plot_heatmap(self, df, column, title): fig, ax = plt.subplots(1, 1, figsize=(12, 10)) fig.patch.set_alpha(0) plt.grid('on', zorder=0) df.plot(column=column, ax=ax, legend=True, cmap=\"terrain\") plt.title(title) plt.xlabel('Longitude') plt.ylabel('Latitude') plt.show() def plot_3d_map(self, data): fig, ax = plt.subplots(1, 1, figsize=(12, 10)) fig.set_size_inches(18.5, 10.5, forward=True) ax = plt.axes(projection='3d') x = data.geometry.x y = data.geometry.y z = data.elevation points = np.vstack((x, y, z)).transpose() ax.scatter(points[:, 0], points[:, 1], points[:, 2], s=0.01) ax.set_xlabel('Longitude') ax.set_ylabel('Latitude') plt.show()","title":"Visualization"}]}